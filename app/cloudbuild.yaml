# Overview: Cloud Build build pipeline with Cloud Deploy release using git tag.

substitutions:
  _APP_NAME: hello
  _PIPELINE_NAME: deploy-demo-pipeline

steps:

  # Go test
  - id: test
    name: golang@sha256:d87854caf63a176f404416f5a6522a8f35ee00a4743f0148bfc9a3ee1c4c476e
    env:
    - GO111MODULE=on
    entrypoint: /bin/bash
    dir: app
    args:
    - -c
    - |
      go test -short -count=1 -race -covermode=atomic -coverprofile=cover.out ./...

  # Build image
  - id: build
    name: gcr.io/cloud-builders/docker@sha256:1d3fcb164b422c72e13786fd4a03b6da3605d4d65ed245b66941102595795fac
    entrypoint: /bin/bash
    waitFor:
    - test
    dir: app
    args:
    - -c
    - |
      docker build --build-arg VERSION=${TAG_NAME} \
        -t "${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/${_APP_NAME}:${COMMIT_SHA}" \
        -t "${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/${_APP_NAME}:${TAG_NAME}" \
        .
  
  # Publish image, get digest, and save it to file.
  - id: publish
    name: gcr.io/cloud-builders/docker@sha256:1d3fcb164b422c72e13786fd4a03b6da3605d4d65ed245b66941102595795fac
    entrypoint: /bin/bash
    waitFor: 
    - build
    dir: app
    args:
    - -c
    - |-
      docker push "${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/${_APP_NAME}:${TAG_NAME}"
      docker image inspect "${LOCATION}-docker.pkg.dev/${PROJECT_ID}/${REPO_NAME}/${_APP_NAME}:${TAG_NAME}" \
        --format '{{index .RepoDigests 0}}' > image-digest.txt
      cat image-digest.txt

  # Generate Software Bill of Materials (SBOM).
  # Generate SBOM file for all image layers in JSON format (SPDX schema), 
  # and creates attestation for that container image with the SBOM as predicate
  - id: sbom
    name: us-docker.pkg.dev/cloudy-tools/builders/sbominator@sha256:508ebd72e7b83fa3db15419820afa2c8eeff9be2111dd42bb7980c2fdddfd0f4
    entrypoint: /bin/bash
    waitFor:
    - publish
    dir: app
    env:
    - PROJECT=$PROJECT_ID
    - KEY=$_KMS_KEY_NAME
    - COMMIT=$COMMIT_SHA
    - VERSION=$TAG_NAME
    - ATTESTOR=$_BIN_AUTHZ_ID
    args:
    - -c
    - |-
      builder $(cat image-digest.txt)

  # Test against my vulnerability policy.
  # For stability of the demo uses a pre-built image.
  # See the grafeas/kritis for instruction on how to build your own signer.
  # https://github.com/grafeas/kritis/blob/master/docs/signer.md
  - id: scan
    name: us-west1-docker.pkg.dev/cloudy-demos/tools/kritis-signer@sha256:51cec6d7d9390ea8ab9eb3b62f42c5cc69eaa048fcf46b8655fcf205e38a7fe2
    entrypoint: /bin/bash
    waitFor:
    - publish
    args:
    - -c
    - |-
      /kritis/signer \
      -v=10 \
      -mode=check-and-sign \
      -alsologtostderr \
      -image=$(/bin/cat app/image-digest.txt) \
      -policy=policy/vulnz-signing-policy.yaml \
      -note_name=${_NOTE_NAME} \
      -kms_key_name=${_KMS_KEY_NAME} \
      -kms_digest_alg=${_KMS_DIGEST_ALG}

  # Attest image that it was built in GCB, has SBOM, and passed vulnerability scan.
  - id: attest
    name: gcr.io/google.com/cloudsdktool/cloud-sdk@sha256:57b67149c067c2da42bd0464fdf20feb8883c4f3c53a30e6619e87004b101aad
    entrypoint: /bin/bash
    waitFor:
    - sbom
    - scan
    args:
    - -c
    - |-
      gcloud beta container binauthz attestations sign-and-create \
        --attestor projects/${PROJECT_ID}/attestors/built-by-cloud-build \
        --artifact-url $(cat app/image-digest.txt) \
        --keyversion ${_KMS_KEY_NAME}

  # Create release in Google Cloud Deploy
  - id: release
    name: gcr.io/google.com/cloudsdktool/cloud-sdk@sha256:57b67149c067c2da42bd0464fdf20feb8883c4f3c53a30e6619e87004b101aad
    entrypoint: /bin/bash
    waitFor:
    - attest
    dir: app
    args:
    - -c
    - |
      gcloud deploy releases create rel-${SHORT_SHA} \
      --delivery-pipeline ${_PIPELINE_NAME} \
      --region ${LOCATION} \
      --annotations commitId=${REVISION_ID} \
      --images "${_APP_NAME}=$(cat image-digest.txt)"

images:
- ${LOCATION}-docker.pkg.dev/$PROJECT_ID/$REPO_NAME/$_APP_NAME:$TAG_NAME

options:
  requestedVerifyOption: VERIFIED # ensure attestation gen, provenance metadata, for this build
  sourceProvenanceHash: ["SHA256"]
  pool:
    name: 'projects/$PROJECT_ID/locations/$LOCATION/workerPools/$_POOL_NAME'

tags:
- demo